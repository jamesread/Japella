// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: japella/controlapi/v1/control.proto

package controlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jamesread/japella/gen/japella/controlapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JapellaControlApiServiceName is the fully-qualified name of the JapellaControlApiService service.
	JapellaControlApiServiceName = "japella.controlapi.v1.JapellaControlApiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JapellaControlApiServiceGetStatusProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetStatus RPC.
	JapellaControlApiServiceGetStatusProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetStatus"
	// JapellaControlApiServiceSubmitPostProcedure is the fully-qualified name of the
	// JapellaControlApiService's SubmitPost RPC.
	JapellaControlApiServiceSubmitPostProcedure = "/japella.controlapi.v1.JapellaControlApiService/SubmitPost"
	// JapellaControlApiServiceGetCannedPostsProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetCannedPosts RPC.
	JapellaControlApiServiceGetCannedPostsProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetCannedPosts"
	// JapellaControlApiServiceCreateCannedPostProcedure is the fully-qualified name of the
	// JapellaControlApiService's CreateCannedPost RPC.
	JapellaControlApiServiceCreateCannedPostProcedure = "/japella.controlapi.v1.JapellaControlApiService/CreateCannedPost"
	// JapellaControlApiServiceDeleteCannedPostProcedure is the fully-qualified name of the
	// JapellaControlApiService's DeleteCannedPost RPC.
	JapellaControlApiServiceDeleteCannedPostProcedure = "/japella.controlapi.v1.JapellaControlApiService/DeleteCannedPost"
	// JapellaControlApiServiceGetSocialAccountsProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetSocialAccounts RPC.
	JapellaControlApiServiceGetSocialAccountsProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetSocialAccounts"
	// JapellaControlApiServiceDeleteSocialAccountProcedure is the fully-qualified name of the
	// JapellaControlApiService's DeleteSocialAccount RPC.
	JapellaControlApiServiceDeleteSocialAccountProcedure = "/japella.controlapi.v1.JapellaControlApiService/DeleteSocialAccount"
	// JapellaControlApiServiceRefreshSocialAccountProcedure is the fully-qualified name of the
	// JapellaControlApiService's RefreshSocialAccount RPC.
	JapellaControlApiServiceRefreshSocialAccountProcedure = "/japella.controlapi.v1.JapellaControlApiService/RefreshSocialAccount"
	// JapellaControlApiServiceGetConnectorsProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetConnectors RPC.
	JapellaControlApiServiceGetConnectorsProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetConnectors"
	// JapellaControlApiServiceStartOAuthProcedure is the fully-qualified name of the
	// JapellaControlApiService's StartOAuth RPC.
	JapellaControlApiServiceStartOAuthProcedure = "/japella.controlapi.v1.JapellaControlApiService/StartOAuth"
	// JapellaControlApiServiceGetTimelineProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetTimeline RPC.
	JapellaControlApiServiceGetTimelineProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetTimeline"
	// JapellaControlApiServiceSetSocialAccountActiveProcedure is the fully-qualified name of the
	// JapellaControlApiService's SetSocialAccountActive RPC.
	JapellaControlApiServiceSetSocialAccountActiveProcedure = "/japella.controlapi.v1.JapellaControlApiService/SetSocialAccountActive"
)

// JapellaControlApiServiceClient is a client for the japella.controlapi.v1.JapellaControlApiService
// service.
type JapellaControlApiServiceClient interface {
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
	SubmitPost(context.Context, *connect.Request[v1.SubmitPostRequest]) (*connect.Response[v1.SubmitPostResponse], error)
	GetCannedPosts(context.Context, *connect.Request[v1.GetCannedPostsRequest]) (*connect.Response[v1.GetCannedPostsResponse], error)
	CreateCannedPost(context.Context, *connect.Request[v1.CreateCannedPostRequest]) (*connect.Response[v1.CreateCannedPostResponse], error)
	DeleteCannedPost(context.Context, *connect.Request[v1.DeleteCannedPostRequest]) (*connect.Response[v1.DeleteCannedPostResponse], error)
	GetSocialAccounts(context.Context, *connect.Request[v1.GetSocialAccountsRequest]) (*connect.Response[v1.GetSocialAccountsResponse], error)
	DeleteSocialAccount(context.Context, *connect.Request[v1.DeleteSocialAccountRequest]) (*connect.Response[v1.DeleteSocialAccountResponse], error)
	RefreshSocialAccount(context.Context, *connect.Request[v1.RefreshSocialAccountRequest]) (*connect.Response[v1.RefreshSocialAccountResponse], error)
	GetConnectors(context.Context, *connect.Request[v1.GetConnectorsRequest]) (*connect.Response[v1.GetConnectorsResponse], error)
	StartOAuth(context.Context, *connect.Request[v1.StartOAuthRequest]) (*connect.Response[v1.StartOAuthResponse], error)
	GetTimeline(context.Context, *connect.Request[v1.GetTimelineRequest]) (*connect.Response[v1.GetTimelineResponse], error)
	SetSocialAccountActive(context.Context, *connect.Request[v1.SetSocialAccountActiveRequest]) (*connect.Response[v1.SetSocialAccountActiveResponse], error)
}

// NewJapellaControlApiServiceClient constructs a client for the
// japella.controlapi.v1.JapellaControlApiService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJapellaControlApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JapellaControlApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	japellaControlApiServiceMethods := v1.File_japella_controlapi_v1_control_proto.Services().ByName("JapellaControlApiService").Methods()
	return &japellaControlApiServiceClient{
		getStatus: connect.NewClient[v1.GetStatusRequest, v1.GetStatusResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetStatusProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetStatus")),
			connect.WithClientOptions(opts...),
		),
		submitPost: connect.NewClient[v1.SubmitPostRequest, v1.SubmitPostResponse](
			httpClient,
			baseURL+JapellaControlApiServiceSubmitPostProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("SubmitPost")),
			connect.WithClientOptions(opts...),
		),
		getCannedPosts: connect.NewClient[v1.GetCannedPostsRequest, v1.GetCannedPostsResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetCannedPostsProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetCannedPosts")),
			connect.WithClientOptions(opts...),
		),
		createCannedPost: connect.NewClient[v1.CreateCannedPostRequest, v1.CreateCannedPostResponse](
			httpClient,
			baseURL+JapellaControlApiServiceCreateCannedPostProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("CreateCannedPost")),
			connect.WithClientOptions(opts...),
		),
		deleteCannedPost: connect.NewClient[v1.DeleteCannedPostRequest, v1.DeleteCannedPostResponse](
			httpClient,
			baseURL+JapellaControlApiServiceDeleteCannedPostProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("DeleteCannedPost")),
			connect.WithClientOptions(opts...),
		),
		getSocialAccounts: connect.NewClient[v1.GetSocialAccountsRequest, v1.GetSocialAccountsResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetSocialAccountsProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetSocialAccounts")),
			connect.WithClientOptions(opts...),
		),
		deleteSocialAccount: connect.NewClient[v1.DeleteSocialAccountRequest, v1.DeleteSocialAccountResponse](
			httpClient,
			baseURL+JapellaControlApiServiceDeleteSocialAccountProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("DeleteSocialAccount")),
			connect.WithClientOptions(opts...),
		),
		refreshSocialAccount: connect.NewClient[v1.RefreshSocialAccountRequest, v1.RefreshSocialAccountResponse](
			httpClient,
			baseURL+JapellaControlApiServiceRefreshSocialAccountProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("RefreshSocialAccount")),
			connect.WithClientOptions(opts...),
		),
		getConnectors: connect.NewClient[v1.GetConnectorsRequest, v1.GetConnectorsResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetConnectorsProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetConnectors")),
			connect.WithClientOptions(opts...),
		),
		startOAuth: connect.NewClient[v1.StartOAuthRequest, v1.StartOAuthResponse](
			httpClient,
			baseURL+JapellaControlApiServiceStartOAuthProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("StartOAuth")),
			connect.WithClientOptions(opts...),
		),
		getTimeline: connect.NewClient[v1.GetTimelineRequest, v1.GetTimelineResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetTimelineProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetTimeline")),
			connect.WithClientOptions(opts...),
		),
		setSocialAccountActive: connect.NewClient[v1.SetSocialAccountActiveRequest, v1.SetSocialAccountActiveResponse](
			httpClient,
			baseURL+JapellaControlApiServiceSetSocialAccountActiveProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("SetSocialAccountActive")),
			connect.WithClientOptions(opts...),
		),
	}
}

// japellaControlApiServiceClient implements JapellaControlApiServiceClient.
type japellaControlApiServiceClient struct {
	getStatus              *connect.Client[v1.GetStatusRequest, v1.GetStatusResponse]
	submitPost             *connect.Client[v1.SubmitPostRequest, v1.SubmitPostResponse]
	getCannedPosts         *connect.Client[v1.GetCannedPostsRequest, v1.GetCannedPostsResponse]
	createCannedPost       *connect.Client[v1.CreateCannedPostRequest, v1.CreateCannedPostResponse]
	deleteCannedPost       *connect.Client[v1.DeleteCannedPostRequest, v1.DeleteCannedPostResponse]
	getSocialAccounts      *connect.Client[v1.GetSocialAccountsRequest, v1.GetSocialAccountsResponse]
	deleteSocialAccount    *connect.Client[v1.DeleteSocialAccountRequest, v1.DeleteSocialAccountResponse]
	refreshSocialAccount   *connect.Client[v1.RefreshSocialAccountRequest, v1.RefreshSocialAccountResponse]
	getConnectors          *connect.Client[v1.GetConnectorsRequest, v1.GetConnectorsResponse]
	startOAuth             *connect.Client[v1.StartOAuthRequest, v1.StartOAuthResponse]
	getTimeline            *connect.Client[v1.GetTimelineRequest, v1.GetTimelineResponse]
	setSocialAccountActive *connect.Client[v1.SetSocialAccountActiveRequest, v1.SetSocialAccountActiveResponse]
}

// GetStatus calls japella.controlapi.v1.JapellaControlApiService.GetStatus.
func (c *japellaControlApiServiceClient) GetStatus(ctx context.Context, req *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// SubmitPost calls japella.controlapi.v1.JapellaControlApiService.SubmitPost.
func (c *japellaControlApiServiceClient) SubmitPost(ctx context.Context, req *connect.Request[v1.SubmitPostRequest]) (*connect.Response[v1.SubmitPostResponse], error) {
	return c.submitPost.CallUnary(ctx, req)
}

// GetCannedPosts calls japella.controlapi.v1.JapellaControlApiService.GetCannedPosts.
func (c *japellaControlApiServiceClient) GetCannedPosts(ctx context.Context, req *connect.Request[v1.GetCannedPostsRequest]) (*connect.Response[v1.GetCannedPostsResponse], error) {
	return c.getCannedPosts.CallUnary(ctx, req)
}

// CreateCannedPost calls japella.controlapi.v1.JapellaControlApiService.CreateCannedPost.
func (c *japellaControlApiServiceClient) CreateCannedPost(ctx context.Context, req *connect.Request[v1.CreateCannedPostRequest]) (*connect.Response[v1.CreateCannedPostResponse], error) {
	return c.createCannedPost.CallUnary(ctx, req)
}

// DeleteCannedPost calls japella.controlapi.v1.JapellaControlApiService.DeleteCannedPost.
func (c *japellaControlApiServiceClient) DeleteCannedPost(ctx context.Context, req *connect.Request[v1.DeleteCannedPostRequest]) (*connect.Response[v1.DeleteCannedPostResponse], error) {
	return c.deleteCannedPost.CallUnary(ctx, req)
}

// GetSocialAccounts calls japella.controlapi.v1.JapellaControlApiService.GetSocialAccounts.
func (c *japellaControlApiServiceClient) GetSocialAccounts(ctx context.Context, req *connect.Request[v1.GetSocialAccountsRequest]) (*connect.Response[v1.GetSocialAccountsResponse], error) {
	return c.getSocialAccounts.CallUnary(ctx, req)
}

// DeleteSocialAccount calls japella.controlapi.v1.JapellaControlApiService.DeleteSocialAccount.
func (c *japellaControlApiServiceClient) DeleteSocialAccount(ctx context.Context, req *connect.Request[v1.DeleteSocialAccountRequest]) (*connect.Response[v1.DeleteSocialAccountResponse], error) {
	return c.deleteSocialAccount.CallUnary(ctx, req)
}

// RefreshSocialAccount calls japella.controlapi.v1.JapellaControlApiService.RefreshSocialAccount.
func (c *japellaControlApiServiceClient) RefreshSocialAccount(ctx context.Context, req *connect.Request[v1.RefreshSocialAccountRequest]) (*connect.Response[v1.RefreshSocialAccountResponse], error) {
	return c.refreshSocialAccount.CallUnary(ctx, req)
}

// GetConnectors calls japella.controlapi.v1.JapellaControlApiService.GetConnectors.
func (c *japellaControlApiServiceClient) GetConnectors(ctx context.Context, req *connect.Request[v1.GetConnectorsRequest]) (*connect.Response[v1.GetConnectorsResponse], error) {
	return c.getConnectors.CallUnary(ctx, req)
}

// StartOAuth calls japella.controlapi.v1.JapellaControlApiService.StartOAuth.
func (c *japellaControlApiServiceClient) StartOAuth(ctx context.Context, req *connect.Request[v1.StartOAuthRequest]) (*connect.Response[v1.StartOAuthResponse], error) {
	return c.startOAuth.CallUnary(ctx, req)
}

// GetTimeline calls japella.controlapi.v1.JapellaControlApiService.GetTimeline.
func (c *japellaControlApiServiceClient) GetTimeline(ctx context.Context, req *connect.Request[v1.GetTimelineRequest]) (*connect.Response[v1.GetTimelineResponse], error) {
	return c.getTimeline.CallUnary(ctx, req)
}

// SetSocialAccountActive calls
// japella.controlapi.v1.JapellaControlApiService.SetSocialAccountActive.
func (c *japellaControlApiServiceClient) SetSocialAccountActive(ctx context.Context, req *connect.Request[v1.SetSocialAccountActiveRequest]) (*connect.Response[v1.SetSocialAccountActiveResponse], error) {
	return c.setSocialAccountActive.CallUnary(ctx, req)
}

// JapellaControlApiServiceHandler is an implementation of the
// japella.controlapi.v1.JapellaControlApiService service.
type JapellaControlApiServiceHandler interface {
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
	SubmitPost(context.Context, *connect.Request[v1.SubmitPostRequest]) (*connect.Response[v1.SubmitPostResponse], error)
	GetCannedPosts(context.Context, *connect.Request[v1.GetCannedPostsRequest]) (*connect.Response[v1.GetCannedPostsResponse], error)
	CreateCannedPost(context.Context, *connect.Request[v1.CreateCannedPostRequest]) (*connect.Response[v1.CreateCannedPostResponse], error)
	DeleteCannedPost(context.Context, *connect.Request[v1.DeleteCannedPostRequest]) (*connect.Response[v1.DeleteCannedPostResponse], error)
	GetSocialAccounts(context.Context, *connect.Request[v1.GetSocialAccountsRequest]) (*connect.Response[v1.GetSocialAccountsResponse], error)
	DeleteSocialAccount(context.Context, *connect.Request[v1.DeleteSocialAccountRequest]) (*connect.Response[v1.DeleteSocialAccountResponse], error)
	RefreshSocialAccount(context.Context, *connect.Request[v1.RefreshSocialAccountRequest]) (*connect.Response[v1.RefreshSocialAccountResponse], error)
	GetConnectors(context.Context, *connect.Request[v1.GetConnectorsRequest]) (*connect.Response[v1.GetConnectorsResponse], error)
	StartOAuth(context.Context, *connect.Request[v1.StartOAuthRequest]) (*connect.Response[v1.StartOAuthResponse], error)
	GetTimeline(context.Context, *connect.Request[v1.GetTimelineRequest]) (*connect.Response[v1.GetTimelineResponse], error)
	SetSocialAccountActive(context.Context, *connect.Request[v1.SetSocialAccountActiveRequest]) (*connect.Response[v1.SetSocialAccountActiveResponse], error)
}

// NewJapellaControlApiServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJapellaControlApiServiceHandler(svc JapellaControlApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	japellaControlApiServiceMethods := v1.File_japella_controlapi_v1_control_proto.Services().ByName("JapellaControlApiService").Methods()
	japellaControlApiServiceGetStatusHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetStatusProcedure,
		svc.GetStatus,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetStatus")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceSubmitPostHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceSubmitPostProcedure,
		svc.SubmitPost,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("SubmitPost")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceGetCannedPostsHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetCannedPostsProcedure,
		svc.GetCannedPosts,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetCannedPosts")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceCreateCannedPostHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceCreateCannedPostProcedure,
		svc.CreateCannedPost,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("CreateCannedPost")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceDeleteCannedPostHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceDeleteCannedPostProcedure,
		svc.DeleteCannedPost,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("DeleteCannedPost")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceGetSocialAccountsHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetSocialAccountsProcedure,
		svc.GetSocialAccounts,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetSocialAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceDeleteSocialAccountHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceDeleteSocialAccountProcedure,
		svc.DeleteSocialAccount,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("DeleteSocialAccount")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceRefreshSocialAccountHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceRefreshSocialAccountProcedure,
		svc.RefreshSocialAccount,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("RefreshSocialAccount")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceGetConnectorsHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetConnectorsProcedure,
		svc.GetConnectors,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetConnectors")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceStartOAuthHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceStartOAuthProcedure,
		svc.StartOAuth,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("StartOAuth")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceGetTimelineHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetTimelineProcedure,
		svc.GetTimeline,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetTimeline")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceSetSocialAccountActiveHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceSetSocialAccountActiveProcedure,
		svc.SetSocialAccountActive,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("SetSocialAccountActive")),
		connect.WithHandlerOptions(opts...),
	)
	return "/japella.controlapi.v1.JapellaControlApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JapellaControlApiServiceGetStatusProcedure:
			japellaControlApiServiceGetStatusHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceSubmitPostProcedure:
			japellaControlApiServiceSubmitPostHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceGetCannedPostsProcedure:
			japellaControlApiServiceGetCannedPostsHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceCreateCannedPostProcedure:
			japellaControlApiServiceCreateCannedPostHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceDeleteCannedPostProcedure:
			japellaControlApiServiceDeleteCannedPostHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceGetSocialAccountsProcedure:
			japellaControlApiServiceGetSocialAccountsHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceDeleteSocialAccountProcedure:
			japellaControlApiServiceDeleteSocialAccountHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceRefreshSocialAccountProcedure:
			japellaControlApiServiceRefreshSocialAccountHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceGetConnectorsProcedure:
			japellaControlApiServiceGetConnectorsHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceStartOAuthProcedure:
			japellaControlApiServiceStartOAuthHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceGetTimelineProcedure:
			japellaControlApiServiceGetTimelineHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceSetSocialAccountActiveProcedure:
			japellaControlApiServiceSetSocialAccountActiveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJapellaControlApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJapellaControlApiServiceHandler struct{}

func (UnimplementedJapellaControlApiServiceHandler) GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetStatus is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) SubmitPost(context.Context, *connect.Request[v1.SubmitPostRequest]) (*connect.Response[v1.SubmitPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.SubmitPost is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) GetCannedPosts(context.Context, *connect.Request[v1.GetCannedPostsRequest]) (*connect.Response[v1.GetCannedPostsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetCannedPosts is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) CreateCannedPost(context.Context, *connect.Request[v1.CreateCannedPostRequest]) (*connect.Response[v1.CreateCannedPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.CreateCannedPost is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) DeleteCannedPost(context.Context, *connect.Request[v1.DeleteCannedPostRequest]) (*connect.Response[v1.DeleteCannedPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.DeleteCannedPost is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) GetSocialAccounts(context.Context, *connect.Request[v1.GetSocialAccountsRequest]) (*connect.Response[v1.GetSocialAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetSocialAccounts is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) DeleteSocialAccount(context.Context, *connect.Request[v1.DeleteSocialAccountRequest]) (*connect.Response[v1.DeleteSocialAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.DeleteSocialAccount is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) RefreshSocialAccount(context.Context, *connect.Request[v1.RefreshSocialAccountRequest]) (*connect.Response[v1.RefreshSocialAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.RefreshSocialAccount is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) GetConnectors(context.Context, *connect.Request[v1.GetConnectorsRequest]) (*connect.Response[v1.GetConnectorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetConnectors is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) StartOAuth(context.Context, *connect.Request[v1.StartOAuthRequest]) (*connect.Response[v1.StartOAuthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.StartOAuth is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) GetTimeline(context.Context, *connect.Request[v1.GetTimelineRequest]) (*connect.Response[v1.GetTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetTimeline is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) SetSocialAccountActive(context.Context, *connect.Request[v1.SetSocialAccountActiveRequest]) (*connect.Response[v1.SetSocialAccountActiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.SetSocialAccountActive is not implemented"))
}
