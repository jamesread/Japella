// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: japella/controlapi/v1/control.proto

package controlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jamesread/japella/gen/japella/controlapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JapellaControlApiServiceName is the fully-qualified name of the JapellaControlApiService service.
	JapellaControlApiServiceName = "japella.controlapi.v1.JapellaControlApiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JapellaControlApiServiceGetStatusProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetStatus RPC.
	JapellaControlApiServiceGetStatusProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetStatus"
	// JapellaControlApiServiceSubmitPostProcedure is the fully-qualified name of the
	// JapellaControlApiService's SubmitPost RPC.
	JapellaControlApiServiceSubmitPostProcedure = "/japella.controlapi.v1.JapellaControlApiService/SubmitPost"
	// JapellaControlApiServiceGetCannedPostsProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetCannedPosts RPC.
	JapellaControlApiServiceGetCannedPostsProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetCannedPosts"
	// JapellaControlApiServiceGetCannedPostProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetCannedPost RPC.
	JapellaControlApiServiceGetCannedPostProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetCannedPost"
	// JapellaControlApiServiceCreateCannedPostProcedure is the fully-qualified name of the
	// JapellaControlApiService's CreateCannedPost RPC.
	JapellaControlApiServiceCreateCannedPostProcedure = "/japella.controlapi.v1.JapellaControlApiService/CreateCannedPost"
	// JapellaControlApiServiceDeleteCannedPostProcedure is the fully-qualified name of the
	// JapellaControlApiService's DeleteCannedPost RPC.
	JapellaControlApiServiceDeleteCannedPostProcedure = "/japella.controlapi.v1.JapellaControlApiService/DeleteCannedPost"
	// JapellaControlApiServiceGetSocialAccountsProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetSocialAccounts RPC.
	JapellaControlApiServiceGetSocialAccountsProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetSocialAccounts"
	// JapellaControlApiServiceDeleteSocialAccountProcedure is the fully-qualified name of the
	// JapellaControlApiService's DeleteSocialAccount RPC.
	JapellaControlApiServiceDeleteSocialAccountProcedure = "/japella.controlapi.v1.JapellaControlApiService/DeleteSocialAccount"
	// JapellaControlApiServiceRefreshSocialAccountProcedure is the fully-qualified name of the
	// JapellaControlApiService's RefreshSocialAccount RPC.
	JapellaControlApiServiceRefreshSocialAccountProcedure = "/japella.controlapi.v1.JapellaControlApiService/RefreshSocialAccount"
	// JapellaControlApiServiceGetConnectorsProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetConnectors RPC.
	JapellaControlApiServiceGetConnectorsProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetConnectors"
	// JapellaControlApiServiceStartOAuthProcedure is the fully-qualified name of the
	// JapellaControlApiService's StartOAuth RPC.
	JapellaControlApiServiceStartOAuthProcedure = "/japella.controlapi.v1.JapellaControlApiService/StartOAuth"
	// JapellaControlApiServiceGetTimelineProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetTimeline RPC.
	JapellaControlApiServiceGetTimelineProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetTimeline"
	// JapellaControlApiServiceSetSocialAccountActiveProcedure is the fully-qualified name of the
	// JapellaControlApiService's SetSocialAccountActive RPC.
	JapellaControlApiServiceSetSocialAccountActiveProcedure = "/japella.controlapi.v1.JapellaControlApiService/SetSocialAccountActive"
	// JapellaControlApiServiceLoginWithUsernameAndPasswordProcedure is the fully-qualified name of the
	// JapellaControlApiService's LoginWithUsernameAndPassword RPC.
	JapellaControlApiServiceLoginWithUsernameAndPasswordProcedure = "/japella.controlapi.v1.JapellaControlApiService/LoginWithUsernameAndPassword"
	// JapellaControlApiServiceGetUsersProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetUsers RPC.
	JapellaControlApiServiceGetUsersProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetUsers"
	// JapellaControlApiServiceGetApiKeysProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetApiKeys RPC.
	JapellaControlApiServiceGetApiKeysProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetApiKeys"
	// JapellaControlApiServiceGetCvarsProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetCvars RPC.
	JapellaControlApiServiceGetCvarsProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetCvars"
	// JapellaControlApiServiceSaveUserPreferencesProcedure is the fully-qualified name of the
	// JapellaControlApiService's SaveUserPreferences RPC.
	JapellaControlApiServiceSaveUserPreferencesProcedure = "/japella.controlapi.v1.JapellaControlApiService/SaveUserPreferences"
	// JapellaControlApiServiceCreateApiKeyProcedure is the fully-qualified name of the
	// JapellaControlApiService's CreateApiKey RPC.
	JapellaControlApiServiceCreateApiKeyProcedure = "/japella.controlapi.v1.JapellaControlApiService/CreateApiKey"
	// JapellaControlApiServiceRevokeApiKeyProcedure is the fully-qualified name of the
	// JapellaControlApiService's RevokeApiKey RPC.
	JapellaControlApiServiceRevokeApiKeyProcedure = "/japella.controlapi.v1.JapellaControlApiService/RevokeApiKey"
	// JapellaControlApiServiceSetCvarProcedure is the fully-qualified name of the
	// JapellaControlApiService's SetCvar RPC.
	JapellaControlApiServiceSetCvarProcedure = "/japella.controlapi.v1.JapellaControlApiService/SetCvar"
	// JapellaControlApiServiceRegisterConnectorProcedure is the fully-qualified name of the
	// JapellaControlApiService's RegisterConnector RPC.
	JapellaControlApiServiceRegisterConnectorProcedure = "/japella.controlapi.v1.JapellaControlApiService/RegisterConnector"
	// JapellaControlApiServiceCreateCampaignProcedure is the fully-qualified name of the
	// JapellaControlApiService's CreateCampaign RPC.
	JapellaControlApiServiceCreateCampaignProcedure = "/japella.controlapi.v1.JapellaControlApiService/CreateCampaign"
	// JapellaControlApiServiceGetCampaignsProcedure is the fully-qualified name of the
	// JapellaControlApiService's GetCampaigns RPC.
	JapellaControlApiServiceGetCampaignsProcedure = "/japella.controlapi.v1.JapellaControlApiService/GetCampaigns"
	// JapellaControlApiServiceUpdateCampaignProcedure is the fully-qualified name of the
	// JapellaControlApiService's UpdateCampaign RPC.
	JapellaControlApiServiceUpdateCampaignProcedure = "/japella.controlapi.v1.JapellaControlApiService/UpdateCampaign"
	// JapellaControlApiServiceDeleteCampaignProcedure is the fully-qualified name of the
	// JapellaControlApiService's DeleteCampaign RPC.
	JapellaControlApiServiceDeleteCampaignProcedure = "/japella.controlapi.v1.JapellaControlApiService/DeleteCampaign"
	// JapellaControlApiServiceUpdateCannedPostProcedure is the fully-qualified name of the
	// JapellaControlApiService's UpdateCannedPost RPC.
	JapellaControlApiServiceUpdateCannedPostProcedure = "/japella.controlapi.v1.JapellaControlApiService/UpdateCannedPost"
)

// JapellaControlApiServiceClient is a client for the japella.controlapi.v1.JapellaControlApiService
// service.
type JapellaControlApiServiceClient interface {
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
	SubmitPost(context.Context, *connect.Request[v1.SubmitPostRequest]) (*connect.Response[v1.SubmitPostResponse], error)
	GetCannedPosts(context.Context, *connect.Request[v1.GetCannedPostsRequest]) (*connect.Response[v1.GetCannedPostsResponse], error)
	GetCannedPost(context.Context, *connect.Request[v1.GetCannedPostRequest]) (*connect.Response[v1.GetCannedPostResponse], error)
	CreateCannedPost(context.Context, *connect.Request[v1.CreateCannedPostRequest]) (*connect.Response[v1.CreateCannedPostResponse], error)
	DeleteCannedPost(context.Context, *connect.Request[v1.DeleteCannedPostRequest]) (*connect.Response[v1.DeleteCannedPostResponse], error)
	GetSocialAccounts(context.Context, *connect.Request[v1.GetSocialAccountsRequest]) (*connect.Response[v1.GetSocialAccountsResponse], error)
	DeleteSocialAccount(context.Context, *connect.Request[v1.DeleteSocialAccountRequest]) (*connect.Response[v1.DeleteSocialAccountResponse], error)
	RefreshSocialAccount(context.Context, *connect.Request[v1.RefreshSocialAccountRequest]) (*connect.Response[v1.RefreshSocialAccountResponse], error)
	GetConnectors(context.Context, *connect.Request[v1.GetConnectorsRequest]) (*connect.Response[v1.GetConnectorsResponse], error)
	StartOAuth(context.Context, *connect.Request[v1.StartOAuthRequest]) (*connect.Response[v1.StartOAuthResponse], error)
	GetTimeline(context.Context, *connect.Request[v1.GetTimelineRequest]) (*connect.Response[v1.GetTimelineResponse], error)
	SetSocialAccountActive(context.Context, *connect.Request[v1.SetSocialAccountActiveRequest]) (*connect.Response[v1.SetSocialAccountActiveResponse], error)
	LoginWithUsernameAndPassword(context.Context, *connect.Request[v1.LoginWithUsernameAndPasswordRequest]) (*connect.Response[v1.LoginWithUsernameAndPasswordResponse], error)
	GetUsers(context.Context, *connect.Request[v1.GetUsersRequest]) (*connect.Response[v1.GetUsersResponse], error)
	GetApiKeys(context.Context, *connect.Request[v1.GetApiKeysRequest]) (*connect.Response[v1.GetApiKeysResponse], error)
	GetCvars(context.Context, *connect.Request[v1.GetCvarsRequest]) (*connect.Response[v1.GetCvarsResponse], error)
	SaveUserPreferences(context.Context, *connect.Request[v1.SaveUserPreferencesRequest]) (*connect.Response[v1.SaveUserPreferencesResponse], error)
	CreateApiKey(context.Context, *connect.Request[v1.CreateApiKeyRequest]) (*connect.Response[v1.CreateApiKeyResponse], error)
	RevokeApiKey(context.Context, *connect.Request[v1.RevokeApiKeyRequest]) (*connect.Response[v1.RevokeApiKeyResponse], error)
	SetCvar(context.Context, *connect.Request[v1.SetCvarRequest]) (*connect.Response[v1.SetCvarResponse], error)
	RegisterConnector(context.Context, *connect.Request[v1.RegisterConnectorRequest]) (*connect.Response[v1.RegisterConnectorResponse], error)
	CreateCampaign(context.Context, *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error)
	GetCampaigns(context.Context, *connect.Request[v1.GetCampaignsRequest]) (*connect.Response[v1.GetCampaignsResponse], error)
	UpdateCampaign(context.Context, *connect.Request[v1.UpdateCampaignRequest]) (*connect.Response[v1.UpdateCampaignResponse], error)
	DeleteCampaign(context.Context, *connect.Request[v1.DeleteCampaignRequest]) (*connect.Response[v1.DeleteCampaignResponse], error)
	UpdateCannedPost(context.Context, *connect.Request[v1.UpdateCannedPostRequest]) (*connect.Response[v1.UpdateCannedPostResponse], error)
}

// NewJapellaControlApiServiceClient constructs a client for the
// japella.controlapi.v1.JapellaControlApiService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJapellaControlApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JapellaControlApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	japellaControlApiServiceMethods := v1.File_japella_controlapi_v1_control_proto.Services().ByName("JapellaControlApiService").Methods()
	return &japellaControlApiServiceClient{
		getStatus: connect.NewClient[v1.GetStatusRequest, v1.GetStatusResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetStatusProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetStatus")),
			connect.WithClientOptions(opts...),
		),
		submitPost: connect.NewClient[v1.SubmitPostRequest, v1.SubmitPostResponse](
			httpClient,
			baseURL+JapellaControlApiServiceSubmitPostProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("SubmitPost")),
			connect.WithClientOptions(opts...),
		),
		getCannedPosts: connect.NewClient[v1.GetCannedPostsRequest, v1.GetCannedPostsResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetCannedPostsProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetCannedPosts")),
			connect.WithClientOptions(opts...),
		),
		getCannedPost: connect.NewClient[v1.GetCannedPostRequest, v1.GetCannedPostResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetCannedPostProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetCannedPost")),
			connect.WithClientOptions(opts...),
		),
		createCannedPost: connect.NewClient[v1.CreateCannedPostRequest, v1.CreateCannedPostResponse](
			httpClient,
			baseURL+JapellaControlApiServiceCreateCannedPostProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("CreateCannedPost")),
			connect.WithClientOptions(opts...),
		),
		deleteCannedPost: connect.NewClient[v1.DeleteCannedPostRequest, v1.DeleteCannedPostResponse](
			httpClient,
			baseURL+JapellaControlApiServiceDeleteCannedPostProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("DeleteCannedPost")),
			connect.WithClientOptions(opts...),
		),
		getSocialAccounts: connect.NewClient[v1.GetSocialAccountsRequest, v1.GetSocialAccountsResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetSocialAccountsProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetSocialAccounts")),
			connect.WithClientOptions(opts...),
		),
		deleteSocialAccount: connect.NewClient[v1.DeleteSocialAccountRequest, v1.DeleteSocialAccountResponse](
			httpClient,
			baseURL+JapellaControlApiServiceDeleteSocialAccountProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("DeleteSocialAccount")),
			connect.WithClientOptions(opts...),
		),
		refreshSocialAccount: connect.NewClient[v1.RefreshSocialAccountRequest, v1.RefreshSocialAccountResponse](
			httpClient,
			baseURL+JapellaControlApiServiceRefreshSocialAccountProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("RefreshSocialAccount")),
			connect.WithClientOptions(opts...),
		),
		getConnectors: connect.NewClient[v1.GetConnectorsRequest, v1.GetConnectorsResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetConnectorsProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetConnectors")),
			connect.WithClientOptions(opts...),
		),
		startOAuth: connect.NewClient[v1.StartOAuthRequest, v1.StartOAuthResponse](
			httpClient,
			baseURL+JapellaControlApiServiceStartOAuthProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("StartOAuth")),
			connect.WithClientOptions(opts...),
		),
		getTimeline: connect.NewClient[v1.GetTimelineRequest, v1.GetTimelineResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetTimelineProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetTimeline")),
			connect.WithClientOptions(opts...),
		),
		setSocialAccountActive: connect.NewClient[v1.SetSocialAccountActiveRequest, v1.SetSocialAccountActiveResponse](
			httpClient,
			baseURL+JapellaControlApiServiceSetSocialAccountActiveProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("SetSocialAccountActive")),
			connect.WithClientOptions(opts...),
		),
		loginWithUsernameAndPassword: connect.NewClient[v1.LoginWithUsernameAndPasswordRequest, v1.LoginWithUsernameAndPasswordResponse](
			httpClient,
			baseURL+JapellaControlApiServiceLoginWithUsernameAndPasswordProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("LoginWithUsernameAndPassword")),
			connect.WithClientOptions(opts...),
		),
		getUsers: connect.NewClient[v1.GetUsersRequest, v1.GetUsersResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetUsersProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetUsers")),
			connect.WithClientOptions(opts...),
		),
		getApiKeys: connect.NewClient[v1.GetApiKeysRequest, v1.GetApiKeysResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetApiKeysProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetApiKeys")),
			connect.WithClientOptions(opts...),
		),
		getCvars: connect.NewClient[v1.GetCvarsRequest, v1.GetCvarsResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetCvarsProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetCvars")),
			connect.WithClientOptions(opts...),
		),
		saveUserPreferences: connect.NewClient[v1.SaveUserPreferencesRequest, v1.SaveUserPreferencesResponse](
			httpClient,
			baseURL+JapellaControlApiServiceSaveUserPreferencesProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("SaveUserPreferences")),
			connect.WithClientOptions(opts...),
		),
		createApiKey: connect.NewClient[v1.CreateApiKeyRequest, v1.CreateApiKeyResponse](
			httpClient,
			baseURL+JapellaControlApiServiceCreateApiKeyProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("CreateApiKey")),
			connect.WithClientOptions(opts...),
		),
		revokeApiKey: connect.NewClient[v1.RevokeApiKeyRequest, v1.RevokeApiKeyResponse](
			httpClient,
			baseURL+JapellaControlApiServiceRevokeApiKeyProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("RevokeApiKey")),
			connect.WithClientOptions(opts...),
		),
		setCvar: connect.NewClient[v1.SetCvarRequest, v1.SetCvarResponse](
			httpClient,
			baseURL+JapellaControlApiServiceSetCvarProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("SetCvar")),
			connect.WithClientOptions(opts...),
		),
		registerConnector: connect.NewClient[v1.RegisterConnectorRequest, v1.RegisterConnectorResponse](
			httpClient,
			baseURL+JapellaControlApiServiceRegisterConnectorProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("RegisterConnector")),
			connect.WithClientOptions(opts...),
		),
		createCampaign: connect.NewClient[v1.CreateCampaignRequest, v1.CreateCampaignResponse](
			httpClient,
			baseURL+JapellaControlApiServiceCreateCampaignProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("CreateCampaign")),
			connect.WithClientOptions(opts...),
		),
		getCampaigns: connect.NewClient[v1.GetCampaignsRequest, v1.GetCampaignsResponse](
			httpClient,
			baseURL+JapellaControlApiServiceGetCampaignsProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("GetCampaigns")),
			connect.WithClientOptions(opts...),
		),
		updateCampaign: connect.NewClient[v1.UpdateCampaignRequest, v1.UpdateCampaignResponse](
			httpClient,
			baseURL+JapellaControlApiServiceUpdateCampaignProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("UpdateCampaign")),
			connect.WithClientOptions(opts...),
		),
		deleteCampaign: connect.NewClient[v1.DeleteCampaignRequest, v1.DeleteCampaignResponse](
			httpClient,
			baseURL+JapellaControlApiServiceDeleteCampaignProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("DeleteCampaign")),
			connect.WithClientOptions(opts...),
		),
		updateCannedPost: connect.NewClient[v1.UpdateCannedPostRequest, v1.UpdateCannedPostResponse](
			httpClient,
			baseURL+JapellaControlApiServiceUpdateCannedPostProcedure,
			connect.WithSchema(japellaControlApiServiceMethods.ByName("UpdateCannedPost")),
			connect.WithClientOptions(opts...),
		),
	}
}

// japellaControlApiServiceClient implements JapellaControlApiServiceClient.
type japellaControlApiServiceClient struct {
	getStatus                    *connect.Client[v1.GetStatusRequest, v1.GetStatusResponse]
	submitPost                   *connect.Client[v1.SubmitPostRequest, v1.SubmitPostResponse]
	getCannedPosts               *connect.Client[v1.GetCannedPostsRequest, v1.GetCannedPostsResponse]
	getCannedPost                *connect.Client[v1.GetCannedPostRequest, v1.GetCannedPostResponse]
	createCannedPost             *connect.Client[v1.CreateCannedPostRequest, v1.CreateCannedPostResponse]
	deleteCannedPost             *connect.Client[v1.DeleteCannedPostRequest, v1.DeleteCannedPostResponse]
	getSocialAccounts            *connect.Client[v1.GetSocialAccountsRequest, v1.GetSocialAccountsResponse]
	deleteSocialAccount          *connect.Client[v1.DeleteSocialAccountRequest, v1.DeleteSocialAccountResponse]
	refreshSocialAccount         *connect.Client[v1.RefreshSocialAccountRequest, v1.RefreshSocialAccountResponse]
	getConnectors                *connect.Client[v1.GetConnectorsRequest, v1.GetConnectorsResponse]
	startOAuth                   *connect.Client[v1.StartOAuthRequest, v1.StartOAuthResponse]
	getTimeline                  *connect.Client[v1.GetTimelineRequest, v1.GetTimelineResponse]
	setSocialAccountActive       *connect.Client[v1.SetSocialAccountActiveRequest, v1.SetSocialAccountActiveResponse]
	loginWithUsernameAndPassword *connect.Client[v1.LoginWithUsernameAndPasswordRequest, v1.LoginWithUsernameAndPasswordResponse]
	getUsers                     *connect.Client[v1.GetUsersRequest, v1.GetUsersResponse]
	getApiKeys                   *connect.Client[v1.GetApiKeysRequest, v1.GetApiKeysResponse]
	getCvars                     *connect.Client[v1.GetCvarsRequest, v1.GetCvarsResponse]
	saveUserPreferences          *connect.Client[v1.SaveUserPreferencesRequest, v1.SaveUserPreferencesResponse]
	createApiKey                 *connect.Client[v1.CreateApiKeyRequest, v1.CreateApiKeyResponse]
	revokeApiKey                 *connect.Client[v1.RevokeApiKeyRequest, v1.RevokeApiKeyResponse]
	setCvar                      *connect.Client[v1.SetCvarRequest, v1.SetCvarResponse]
	registerConnector            *connect.Client[v1.RegisterConnectorRequest, v1.RegisterConnectorResponse]
	createCampaign               *connect.Client[v1.CreateCampaignRequest, v1.CreateCampaignResponse]
	getCampaigns                 *connect.Client[v1.GetCampaignsRequest, v1.GetCampaignsResponse]
	updateCampaign               *connect.Client[v1.UpdateCampaignRequest, v1.UpdateCampaignResponse]
	deleteCampaign               *connect.Client[v1.DeleteCampaignRequest, v1.DeleteCampaignResponse]
	updateCannedPost             *connect.Client[v1.UpdateCannedPostRequest, v1.UpdateCannedPostResponse]
}

// GetStatus calls japella.controlapi.v1.JapellaControlApiService.GetStatus.
func (c *japellaControlApiServiceClient) GetStatus(ctx context.Context, req *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// SubmitPost calls japella.controlapi.v1.JapellaControlApiService.SubmitPost.
func (c *japellaControlApiServiceClient) SubmitPost(ctx context.Context, req *connect.Request[v1.SubmitPostRequest]) (*connect.Response[v1.SubmitPostResponse], error) {
	return c.submitPost.CallUnary(ctx, req)
}

// GetCannedPosts calls japella.controlapi.v1.JapellaControlApiService.GetCannedPosts.
func (c *japellaControlApiServiceClient) GetCannedPosts(ctx context.Context, req *connect.Request[v1.GetCannedPostsRequest]) (*connect.Response[v1.GetCannedPostsResponse], error) {
	return c.getCannedPosts.CallUnary(ctx, req)
}

// GetCannedPost calls japella.controlapi.v1.JapellaControlApiService.GetCannedPost.
func (c *japellaControlApiServiceClient) GetCannedPost(ctx context.Context, req *connect.Request[v1.GetCannedPostRequest]) (*connect.Response[v1.GetCannedPostResponse], error) {
	return c.getCannedPost.CallUnary(ctx, req)
}

// CreateCannedPost calls japella.controlapi.v1.JapellaControlApiService.CreateCannedPost.
func (c *japellaControlApiServiceClient) CreateCannedPost(ctx context.Context, req *connect.Request[v1.CreateCannedPostRequest]) (*connect.Response[v1.CreateCannedPostResponse], error) {
	return c.createCannedPost.CallUnary(ctx, req)
}

// DeleteCannedPost calls japella.controlapi.v1.JapellaControlApiService.DeleteCannedPost.
func (c *japellaControlApiServiceClient) DeleteCannedPost(ctx context.Context, req *connect.Request[v1.DeleteCannedPostRequest]) (*connect.Response[v1.DeleteCannedPostResponse], error) {
	return c.deleteCannedPost.CallUnary(ctx, req)
}

// GetSocialAccounts calls japella.controlapi.v1.JapellaControlApiService.GetSocialAccounts.
func (c *japellaControlApiServiceClient) GetSocialAccounts(ctx context.Context, req *connect.Request[v1.GetSocialAccountsRequest]) (*connect.Response[v1.GetSocialAccountsResponse], error) {
	return c.getSocialAccounts.CallUnary(ctx, req)
}

// DeleteSocialAccount calls japella.controlapi.v1.JapellaControlApiService.DeleteSocialAccount.
func (c *japellaControlApiServiceClient) DeleteSocialAccount(ctx context.Context, req *connect.Request[v1.DeleteSocialAccountRequest]) (*connect.Response[v1.DeleteSocialAccountResponse], error) {
	return c.deleteSocialAccount.CallUnary(ctx, req)
}

// RefreshSocialAccount calls japella.controlapi.v1.JapellaControlApiService.RefreshSocialAccount.
func (c *japellaControlApiServiceClient) RefreshSocialAccount(ctx context.Context, req *connect.Request[v1.RefreshSocialAccountRequest]) (*connect.Response[v1.RefreshSocialAccountResponse], error) {
	return c.refreshSocialAccount.CallUnary(ctx, req)
}

// GetConnectors calls japella.controlapi.v1.JapellaControlApiService.GetConnectors.
func (c *japellaControlApiServiceClient) GetConnectors(ctx context.Context, req *connect.Request[v1.GetConnectorsRequest]) (*connect.Response[v1.GetConnectorsResponse], error) {
	return c.getConnectors.CallUnary(ctx, req)
}

// StartOAuth calls japella.controlapi.v1.JapellaControlApiService.StartOAuth.
func (c *japellaControlApiServiceClient) StartOAuth(ctx context.Context, req *connect.Request[v1.StartOAuthRequest]) (*connect.Response[v1.StartOAuthResponse], error) {
	return c.startOAuth.CallUnary(ctx, req)
}

// GetTimeline calls japella.controlapi.v1.JapellaControlApiService.GetTimeline.
func (c *japellaControlApiServiceClient) GetTimeline(ctx context.Context, req *connect.Request[v1.GetTimelineRequest]) (*connect.Response[v1.GetTimelineResponse], error) {
	return c.getTimeline.CallUnary(ctx, req)
}

// SetSocialAccountActive calls
// japella.controlapi.v1.JapellaControlApiService.SetSocialAccountActive.
func (c *japellaControlApiServiceClient) SetSocialAccountActive(ctx context.Context, req *connect.Request[v1.SetSocialAccountActiveRequest]) (*connect.Response[v1.SetSocialAccountActiveResponse], error) {
	return c.setSocialAccountActive.CallUnary(ctx, req)
}

// LoginWithUsernameAndPassword calls
// japella.controlapi.v1.JapellaControlApiService.LoginWithUsernameAndPassword.
func (c *japellaControlApiServiceClient) LoginWithUsernameAndPassword(ctx context.Context, req *connect.Request[v1.LoginWithUsernameAndPasswordRequest]) (*connect.Response[v1.LoginWithUsernameAndPasswordResponse], error) {
	return c.loginWithUsernameAndPassword.CallUnary(ctx, req)
}

// GetUsers calls japella.controlapi.v1.JapellaControlApiService.GetUsers.
func (c *japellaControlApiServiceClient) GetUsers(ctx context.Context, req *connect.Request[v1.GetUsersRequest]) (*connect.Response[v1.GetUsersResponse], error) {
	return c.getUsers.CallUnary(ctx, req)
}

// GetApiKeys calls japella.controlapi.v1.JapellaControlApiService.GetApiKeys.
func (c *japellaControlApiServiceClient) GetApiKeys(ctx context.Context, req *connect.Request[v1.GetApiKeysRequest]) (*connect.Response[v1.GetApiKeysResponse], error) {
	return c.getApiKeys.CallUnary(ctx, req)
}

// GetCvars calls japella.controlapi.v1.JapellaControlApiService.GetCvars.
func (c *japellaControlApiServiceClient) GetCvars(ctx context.Context, req *connect.Request[v1.GetCvarsRequest]) (*connect.Response[v1.GetCvarsResponse], error) {
	return c.getCvars.CallUnary(ctx, req)
}

// SaveUserPreferences calls japella.controlapi.v1.JapellaControlApiService.SaveUserPreferences.
func (c *japellaControlApiServiceClient) SaveUserPreferences(ctx context.Context, req *connect.Request[v1.SaveUserPreferencesRequest]) (*connect.Response[v1.SaveUserPreferencesResponse], error) {
	return c.saveUserPreferences.CallUnary(ctx, req)
}

// CreateApiKey calls japella.controlapi.v1.JapellaControlApiService.CreateApiKey.
func (c *japellaControlApiServiceClient) CreateApiKey(ctx context.Context, req *connect.Request[v1.CreateApiKeyRequest]) (*connect.Response[v1.CreateApiKeyResponse], error) {
	return c.createApiKey.CallUnary(ctx, req)
}

// RevokeApiKey calls japella.controlapi.v1.JapellaControlApiService.RevokeApiKey.
func (c *japellaControlApiServiceClient) RevokeApiKey(ctx context.Context, req *connect.Request[v1.RevokeApiKeyRequest]) (*connect.Response[v1.RevokeApiKeyResponse], error) {
	return c.revokeApiKey.CallUnary(ctx, req)
}

// SetCvar calls japella.controlapi.v1.JapellaControlApiService.SetCvar.
func (c *japellaControlApiServiceClient) SetCvar(ctx context.Context, req *connect.Request[v1.SetCvarRequest]) (*connect.Response[v1.SetCvarResponse], error) {
	return c.setCvar.CallUnary(ctx, req)
}

// RegisterConnector calls japella.controlapi.v1.JapellaControlApiService.RegisterConnector.
func (c *japellaControlApiServiceClient) RegisterConnector(ctx context.Context, req *connect.Request[v1.RegisterConnectorRequest]) (*connect.Response[v1.RegisterConnectorResponse], error) {
	return c.registerConnector.CallUnary(ctx, req)
}

// CreateCampaign calls japella.controlapi.v1.JapellaControlApiService.CreateCampaign.
func (c *japellaControlApiServiceClient) CreateCampaign(ctx context.Context, req *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error) {
	return c.createCampaign.CallUnary(ctx, req)
}

// GetCampaigns calls japella.controlapi.v1.JapellaControlApiService.GetCampaigns.
func (c *japellaControlApiServiceClient) GetCampaigns(ctx context.Context, req *connect.Request[v1.GetCampaignsRequest]) (*connect.Response[v1.GetCampaignsResponse], error) {
	return c.getCampaigns.CallUnary(ctx, req)
}

// UpdateCampaign calls japella.controlapi.v1.JapellaControlApiService.UpdateCampaign.
func (c *japellaControlApiServiceClient) UpdateCampaign(ctx context.Context, req *connect.Request[v1.UpdateCampaignRequest]) (*connect.Response[v1.UpdateCampaignResponse], error) {
	return c.updateCampaign.CallUnary(ctx, req)
}

// DeleteCampaign calls japella.controlapi.v1.JapellaControlApiService.DeleteCampaign.
func (c *japellaControlApiServiceClient) DeleteCampaign(ctx context.Context, req *connect.Request[v1.DeleteCampaignRequest]) (*connect.Response[v1.DeleteCampaignResponse], error) {
	return c.deleteCampaign.CallUnary(ctx, req)
}

// UpdateCannedPost calls japella.controlapi.v1.JapellaControlApiService.UpdateCannedPost.
func (c *japellaControlApiServiceClient) UpdateCannedPost(ctx context.Context, req *connect.Request[v1.UpdateCannedPostRequest]) (*connect.Response[v1.UpdateCannedPostResponse], error) {
	return c.updateCannedPost.CallUnary(ctx, req)
}

// JapellaControlApiServiceHandler is an implementation of the
// japella.controlapi.v1.JapellaControlApiService service.
type JapellaControlApiServiceHandler interface {
	GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error)
	SubmitPost(context.Context, *connect.Request[v1.SubmitPostRequest]) (*connect.Response[v1.SubmitPostResponse], error)
	GetCannedPosts(context.Context, *connect.Request[v1.GetCannedPostsRequest]) (*connect.Response[v1.GetCannedPostsResponse], error)
	GetCannedPost(context.Context, *connect.Request[v1.GetCannedPostRequest]) (*connect.Response[v1.GetCannedPostResponse], error)
	CreateCannedPost(context.Context, *connect.Request[v1.CreateCannedPostRequest]) (*connect.Response[v1.CreateCannedPostResponse], error)
	DeleteCannedPost(context.Context, *connect.Request[v1.DeleteCannedPostRequest]) (*connect.Response[v1.DeleteCannedPostResponse], error)
	GetSocialAccounts(context.Context, *connect.Request[v1.GetSocialAccountsRequest]) (*connect.Response[v1.GetSocialAccountsResponse], error)
	DeleteSocialAccount(context.Context, *connect.Request[v1.DeleteSocialAccountRequest]) (*connect.Response[v1.DeleteSocialAccountResponse], error)
	RefreshSocialAccount(context.Context, *connect.Request[v1.RefreshSocialAccountRequest]) (*connect.Response[v1.RefreshSocialAccountResponse], error)
	GetConnectors(context.Context, *connect.Request[v1.GetConnectorsRequest]) (*connect.Response[v1.GetConnectorsResponse], error)
	StartOAuth(context.Context, *connect.Request[v1.StartOAuthRequest]) (*connect.Response[v1.StartOAuthResponse], error)
	GetTimeline(context.Context, *connect.Request[v1.GetTimelineRequest]) (*connect.Response[v1.GetTimelineResponse], error)
	SetSocialAccountActive(context.Context, *connect.Request[v1.SetSocialAccountActiveRequest]) (*connect.Response[v1.SetSocialAccountActiveResponse], error)
	LoginWithUsernameAndPassword(context.Context, *connect.Request[v1.LoginWithUsernameAndPasswordRequest]) (*connect.Response[v1.LoginWithUsernameAndPasswordResponse], error)
	GetUsers(context.Context, *connect.Request[v1.GetUsersRequest]) (*connect.Response[v1.GetUsersResponse], error)
	GetApiKeys(context.Context, *connect.Request[v1.GetApiKeysRequest]) (*connect.Response[v1.GetApiKeysResponse], error)
	GetCvars(context.Context, *connect.Request[v1.GetCvarsRequest]) (*connect.Response[v1.GetCvarsResponse], error)
	SaveUserPreferences(context.Context, *connect.Request[v1.SaveUserPreferencesRequest]) (*connect.Response[v1.SaveUserPreferencesResponse], error)
	CreateApiKey(context.Context, *connect.Request[v1.CreateApiKeyRequest]) (*connect.Response[v1.CreateApiKeyResponse], error)
	RevokeApiKey(context.Context, *connect.Request[v1.RevokeApiKeyRequest]) (*connect.Response[v1.RevokeApiKeyResponse], error)
	SetCvar(context.Context, *connect.Request[v1.SetCvarRequest]) (*connect.Response[v1.SetCvarResponse], error)
	RegisterConnector(context.Context, *connect.Request[v1.RegisterConnectorRequest]) (*connect.Response[v1.RegisterConnectorResponse], error)
	CreateCampaign(context.Context, *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error)
	GetCampaigns(context.Context, *connect.Request[v1.GetCampaignsRequest]) (*connect.Response[v1.GetCampaignsResponse], error)
	UpdateCampaign(context.Context, *connect.Request[v1.UpdateCampaignRequest]) (*connect.Response[v1.UpdateCampaignResponse], error)
	DeleteCampaign(context.Context, *connect.Request[v1.DeleteCampaignRequest]) (*connect.Response[v1.DeleteCampaignResponse], error)
	UpdateCannedPost(context.Context, *connect.Request[v1.UpdateCannedPostRequest]) (*connect.Response[v1.UpdateCannedPostResponse], error)
}

// NewJapellaControlApiServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJapellaControlApiServiceHandler(svc JapellaControlApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	japellaControlApiServiceMethods := v1.File_japella_controlapi_v1_control_proto.Services().ByName("JapellaControlApiService").Methods()
	japellaControlApiServiceGetStatusHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetStatusProcedure,
		svc.GetStatus,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetStatus")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceSubmitPostHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceSubmitPostProcedure,
		svc.SubmitPost,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("SubmitPost")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceGetCannedPostsHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetCannedPostsProcedure,
		svc.GetCannedPosts,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetCannedPosts")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceGetCannedPostHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetCannedPostProcedure,
		svc.GetCannedPost,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetCannedPost")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceCreateCannedPostHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceCreateCannedPostProcedure,
		svc.CreateCannedPost,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("CreateCannedPost")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceDeleteCannedPostHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceDeleteCannedPostProcedure,
		svc.DeleteCannedPost,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("DeleteCannedPost")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceGetSocialAccountsHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetSocialAccountsProcedure,
		svc.GetSocialAccounts,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetSocialAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceDeleteSocialAccountHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceDeleteSocialAccountProcedure,
		svc.DeleteSocialAccount,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("DeleteSocialAccount")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceRefreshSocialAccountHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceRefreshSocialAccountProcedure,
		svc.RefreshSocialAccount,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("RefreshSocialAccount")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceGetConnectorsHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetConnectorsProcedure,
		svc.GetConnectors,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetConnectors")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceStartOAuthHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceStartOAuthProcedure,
		svc.StartOAuth,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("StartOAuth")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceGetTimelineHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetTimelineProcedure,
		svc.GetTimeline,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetTimeline")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceSetSocialAccountActiveHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceSetSocialAccountActiveProcedure,
		svc.SetSocialAccountActive,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("SetSocialAccountActive")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceLoginWithUsernameAndPasswordHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceLoginWithUsernameAndPasswordProcedure,
		svc.LoginWithUsernameAndPassword,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("LoginWithUsernameAndPassword")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceGetUsersHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetUsersProcedure,
		svc.GetUsers,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetUsers")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceGetApiKeysHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetApiKeysProcedure,
		svc.GetApiKeys,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetApiKeys")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceGetCvarsHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetCvarsProcedure,
		svc.GetCvars,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetCvars")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceSaveUserPreferencesHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceSaveUserPreferencesProcedure,
		svc.SaveUserPreferences,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("SaveUserPreferences")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceCreateApiKeyHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceCreateApiKeyProcedure,
		svc.CreateApiKey,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("CreateApiKey")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceRevokeApiKeyHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceRevokeApiKeyProcedure,
		svc.RevokeApiKey,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("RevokeApiKey")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceSetCvarHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceSetCvarProcedure,
		svc.SetCvar,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("SetCvar")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceRegisterConnectorHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceRegisterConnectorProcedure,
		svc.RegisterConnector,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("RegisterConnector")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceCreateCampaignHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceCreateCampaignProcedure,
		svc.CreateCampaign,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("CreateCampaign")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceGetCampaignsHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceGetCampaignsProcedure,
		svc.GetCampaigns,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("GetCampaigns")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceUpdateCampaignHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceUpdateCampaignProcedure,
		svc.UpdateCampaign,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("UpdateCampaign")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceDeleteCampaignHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceDeleteCampaignProcedure,
		svc.DeleteCampaign,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("DeleteCampaign")),
		connect.WithHandlerOptions(opts...),
	)
	japellaControlApiServiceUpdateCannedPostHandler := connect.NewUnaryHandler(
		JapellaControlApiServiceUpdateCannedPostProcedure,
		svc.UpdateCannedPost,
		connect.WithSchema(japellaControlApiServiceMethods.ByName("UpdateCannedPost")),
		connect.WithHandlerOptions(opts...),
	)
	return "/japella.controlapi.v1.JapellaControlApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JapellaControlApiServiceGetStatusProcedure:
			japellaControlApiServiceGetStatusHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceSubmitPostProcedure:
			japellaControlApiServiceSubmitPostHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceGetCannedPostsProcedure:
			japellaControlApiServiceGetCannedPostsHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceGetCannedPostProcedure:
			japellaControlApiServiceGetCannedPostHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceCreateCannedPostProcedure:
			japellaControlApiServiceCreateCannedPostHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceDeleteCannedPostProcedure:
			japellaControlApiServiceDeleteCannedPostHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceGetSocialAccountsProcedure:
			japellaControlApiServiceGetSocialAccountsHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceDeleteSocialAccountProcedure:
			japellaControlApiServiceDeleteSocialAccountHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceRefreshSocialAccountProcedure:
			japellaControlApiServiceRefreshSocialAccountHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceGetConnectorsProcedure:
			japellaControlApiServiceGetConnectorsHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceStartOAuthProcedure:
			japellaControlApiServiceStartOAuthHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceGetTimelineProcedure:
			japellaControlApiServiceGetTimelineHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceSetSocialAccountActiveProcedure:
			japellaControlApiServiceSetSocialAccountActiveHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceLoginWithUsernameAndPasswordProcedure:
			japellaControlApiServiceLoginWithUsernameAndPasswordHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceGetUsersProcedure:
			japellaControlApiServiceGetUsersHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceGetApiKeysProcedure:
			japellaControlApiServiceGetApiKeysHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceGetCvarsProcedure:
			japellaControlApiServiceGetCvarsHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceSaveUserPreferencesProcedure:
			japellaControlApiServiceSaveUserPreferencesHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceCreateApiKeyProcedure:
			japellaControlApiServiceCreateApiKeyHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceRevokeApiKeyProcedure:
			japellaControlApiServiceRevokeApiKeyHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceSetCvarProcedure:
			japellaControlApiServiceSetCvarHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceRegisterConnectorProcedure:
			japellaControlApiServiceRegisterConnectorHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceCreateCampaignProcedure:
			japellaControlApiServiceCreateCampaignHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceGetCampaignsProcedure:
			japellaControlApiServiceGetCampaignsHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceUpdateCampaignProcedure:
			japellaControlApiServiceUpdateCampaignHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceDeleteCampaignProcedure:
			japellaControlApiServiceDeleteCampaignHandler.ServeHTTP(w, r)
		case JapellaControlApiServiceUpdateCannedPostProcedure:
			japellaControlApiServiceUpdateCannedPostHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJapellaControlApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJapellaControlApiServiceHandler struct{}

func (UnimplementedJapellaControlApiServiceHandler) GetStatus(context.Context, *connect.Request[v1.GetStatusRequest]) (*connect.Response[v1.GetStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetStatus is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) SubmitPost(context.Context, *connect.Request[v1.SubmitPostRequest]) (*connect.Response[v1.SubmitPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.SubmitPost is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) GetCannedPosts(context.Context, *connect.Request[v1.GetCannedPostsRequest]) (*connect.Response[v1.GetCannedPostsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetCannedPosts is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) GetCannedPost(context.Context, *connect.Request[v1.GetCannedPostRequest]) (*connect.Response[v1.GetCannedPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetCannedPost is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) CreateCannedPost(context.Context, *connect.Request[v1.CreateCannedPostRequest]) (*connect.Response[v1.CreateCannedPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.CreateCannedPost is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) DeleteCannedPost(context.Context, *connect.Request[v1.DeleteCannedPostRequest]) (*connect.Response[v1.DeleteCannedPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.DeleteCannedPost is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) GetSocialAccounts(context.Context, *connect.Request[v1.GetSocialAccountsRequest]) (*connect.Response[v1.GetSocialAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetSocialAccounts is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) DeleteSocialAccount(context.Context, *connect.Request[v1.DeleteSocialAccountRequest]) (*connect.Response[v1.DeleteSocialAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.DeleteSocialAccount is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) RefreshSocialAccount(context.Context, *connect.Request[v1.RefreshSocialAccountRequest]) (*connect.Response[v1.RefreshSocialAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.RefreshSocialAccount is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) GetConnectors(context.Context, *connect.Request[v1.GetConnectorsRequest]) (*connect.Response[v1.GetConnectorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetConnectors is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) StartOAuth(context.Context, *connect.Request[v1.StartOAuthRequest]) (*connect.Response[v1.StartOAuthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.StartOAuth is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) GetTimeline(context.Context, *connect.Request[v1.GetTimelineRequest]) (*connect.Response[v1.GetTimelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetTimeline is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) SetSocialAccountActive(context.Context, *connect.Request[v1.SetSocialAccountActiveRequest]) (*connect.Response[v1.SetSocialAccountActiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.SetSocialAccountActive is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) LoginWithUsernameAndPassword(context.Context, *connect.Request[v1.LoginWithUsernameAndPasswordRequest]) (*connect.Response[v1.LoginWithUsernameAndPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.LoginWithUsernameAndPassword is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) GetUsers(context.Context, *connect.Request[v1.GetUsersRequest]) (*connect.Response[v1.GetUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetUsers is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) GetApiKeys(context.Context, *connect.Request[v1.GetApiKeysRequest]) (*connect.Response[v1.GetApiKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetApiKeys is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) GetCvars(context.Context, *connect.Request[v1.GetCvarsRequest]) (*connect.Response[v1.GetCvarsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetCvars is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) SaveUserPreferences(context.Context, *connect.Request[v1.SaveUserPreferencesRequest]) (*connect.Response[v1.SaveUserPreferencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.SaveUserPreferences is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) CreateApiKey(context.Context, *connect.Request[v1.CreateApiKeyRequest]) (*connect.Response[v1.CreateApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.CreateApiKey is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) RevokeApiKey(context.Context, *connect.Request[v1.RevokeApiKeyRequest]) (*connect.Response[v1.RevokeApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.RevokeApiKey is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) SetCvar(context.Context, *connect.Request[v1.SetCvarRequest]) (*connect.Response[v1.SetCvarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.SetCvar is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) RegisterConnector(context.Context, *connect.Request[v1.RegisterConnectorRequest]) (*connect.Response[v1.RegisterConnectorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.RegisterConnector is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) CreateCampaign(context.Context, *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.CreateCampaign is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) GetCampaigns(context.Context, *connect.Request[v1.GetCampaignsRequest]) (*connect.Response[v1.GetCampaignsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.GetCampaigns is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) UpdateCampaign(context.Context, *connect.Request[v1.UpdateCampaignRequest]) (*connect.Response[v1.UpdateCampaignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.UpdateCampaign is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) DeleteCampaign(context.Context, *connect.Request[v1.DeleteCampaignRequest]) (*connect.Response[v1.DeleteCampaignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.DeleteCampaign is not implemented"))
}

func (UnimplementedJapellaControlApiServiceHandler) UpdateCannedPost(context.Context, *connect.Request[v1.UpdateCannedPostRequest]) (*connect.Response[v1.UpdateCannedPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("japella.controlapi.v1.JapellaControlApiService.UpdateCannedPost is not implemented"))
}
