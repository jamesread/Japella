{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Japella's documentation","text":"<p>This is the documentation for Japella, chatbot which is multi-protocol and is highly resilient.</p>"},{"location":"#use-cases","title":"Use cases","text":"<ul> <li>Connect two chat protocols together, for example to mirror messages between Discord and Telegram.</li> <li>Write bot utilities that work across multiple chat protocols.</li> </ul>"},{"location":"gettingStarted/","title":"Getting Started","text":"<p>It is recommended to use the docker containers to run Japella.</p> <p>Once it is installed and running, you can start adding scripts.</p>"},{"location":"connectors/","title":"Connectors","text":"<p>Connectors are a way to connect Japella to a chat protocol. This means they are responsible for sending and receiving messages from the chat protocol, they are also responsible for handling the connection to the chat protocol.</p> <p>You can see a list of chat protocols supported by Japella adaptors in the sidebar of this documentation page.</p>"},{"location":"connectors/discord/","title":"Discord","text":"<p>Go to create a new app here; https://discord.com/developers/applications</p> config.discord.yaml<pre><code>configversion: 2\n\nconnectors:\n  discord:\n    appid: \"1234567890\" #notsecret\n    publickey: \"asdfasdf234lk2j34lkjasasdf\" #notsecret\n    token: \"asdf12343234l2kjlasjalkskj\" #notsecret\n</code></pre>"},{"location":"connectors/telegram/","title":"Telegram","text":"<p>This is a simple example of how to use the telegram bot. Use the Telegram Botfather to create a new bot and get the token.</p> config.telegram.yaml<pre><code>configversion: 2\n\nconnectors:\n  telegram:\n    bottoken: \"asdf12344kjdfsdf323l4kj23lk4jg\" #notsecret\n</code></pre>"},{"location":"installation/docker-compose/","title":"Docker Compose","text":"<p>Docker compose is the recommended way to run Japella. It allows you to easily maintain your japella installation consistently across upgrades.</p> <p>You can use the following <code>docker-compose.yml</code> file to run Japella.</p>"},{"location":"installation/docker-compose/#create-the-docker-composeyml-file","title":"Create the docker-compose.yml file","text":"<p>Create this file in a location that is easy to remember.</p> docker-compose.yml<pre><code>---\nservices:\n  japella:\n    container_name: japella\n    image: ghcr.io/jamesread/japella\n    volumes:\n      - japella-config:/config\n    restart: unless-stopped\n    environment:\n      JAPELLA_NANOSERVICES: dashboard,telegram,exec\n    ports:\n      - \"8080:8080\"\n\n  rabbitmq:\n    container_name: rabbitmq\n    image: docker.io/rabbitmq\n    hostname: rabbitmq\n\n# The database in Japella 2 is entirely optional.\n#  mariadb:\n#    container_name: mariadb\n#    image: docker.io/mariadb\n#    environment:\n#      MARIADB_ROOT_PASSWORD: password\n#      MARIADB_DATABASE: japella\n\nvolumes:\n  japella-config:\n    name: japella-config\n    external: false\n</code></pre>"},{"location":"installation/docker-compose/#docker-compose-up","title":"docker compose up","text":"<p>Open a terminal in the same directory as your new <code>docker-compose.yml</code> file and run the following command;</p> <pre><code>user@host: docker compose up -d\n</code></pre> <p>If all goes well, the output should look like this;</p> <pre><code>user@host: docker compose up -d\n[+] Running 2/2\n \u2714 Container rabbitmq  Running\n \u2714 Container japella   Running\n</code></pre> <p>If something has gone wrong, run <code>docker logs japella</code> to view the output.</p>"},{"location":"installation/docker-compose/#check-the-web-interface","title":"Check the web interface","text":""},{"location":"installation/docker-compose/#check-out-the-config-file","title":"Check out the config file","text":"<p>Change into the directory that contains your japella-config volume like this;</p> <pre><code>user@host: cd \"$(docker volume inspect japella-config --format '{{ .Mountpoint }}')\"\n</code></pre>"},{"location":"installation/docker/","title":"Docker","text":"<p>Japella is best run in a Docker container.</p> <p>Warning</p> <p>The recommended way to run Japella is docker compose.</p> <p>Using Japella with a simple <code>docker create</code> command is possible, but it makes upgrades and scaling a bit of a pain.</p> <pre><code>$ docker create --name japella -v japella:/config ghcr.io/jamesread/japella:latest\n$ docker start japella\n</code></pre>"},{"location":"nanoservices/intro/","title":"Nanoservices introduction","text":"<p>Japella is designed to be resilient, and scale up. It has a single container image, and from that image, you can start which internal services of Japella to start up.</p> <p>The current list of nanoservices are;</p> <ul> <li>telegram</li> <li>discord</li> <li>dashboard</li> <li>exec</li> </ul>"}]}